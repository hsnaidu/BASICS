# Complete Mongo-DB Cheat-Sheet
---------------------------------------------------------------------------------------------------

1. Mongo-DB is an unstructured database

2. Mongo-DB is very simple to learn, and uses JSON format for CRUD methods

3. Mongo-DB are used in almost very applications today, specially when you have unstructured data.

---------------------------------------------------------------------------------------------------

* Mongo-DB can be accessed via :

1. MONGOSH (cmd)

2. MONGO-DB Compass (UI)

--------------------------------------------------------------------------------------------------- CREATE DB / COLLECTION

PRE : 

Collection -> Table
Database has a Bunch of Collections -> DB Consist a Group of Table 


1.  TO VIEW ALL THE DATA-BASE

# show dbs

2.  TO VIEW ALL THE COLLECTIONS

# show collections

3. TO DROP THE DATABASE 

use <db-name>
db.dropDatabase() -- Del the database

4. TO DROP A COLLECTION (TABLE)

use <db-name>
show collections
db.<Collection-Name>.drop()

5. TO CREATE A COLLECTION (TABLE)
use <db-name>
db.createCollection("<collection-name">)

# OR
<Just pass the query method>

db.<database-name>.insertOne("<collection-name>")

--------------------------------------------------------------------------------------------------- 

# IF YOU DELETE THE COLLECTION OR DATABASE

# TO RESTORE THE DELETED COLLECTIONS OR DATABASE

# https://www.mongodb.com/docs/ops-manager/current/tutorial/restore-single-database/

# BUT WITH STAND-ALONE IT WONT CREATE ANY REPLICA OF THE SET SO DATA IS DOOMED :(

--------------------------------------------------------------------------------------------------- INSERT

*** ADDING ELEMENTS INTO THE COLLECTION

# 2 ways you can add : insertOne & insertMany

# Inserting a Document

# https://learn.mongodb.com/learn/course/mongodb-crud-operations-insert-and-find-documents/lesson-2-finding-documents-in-a-mongodb-collection/learn?client=customer

db.<collection-name>.insertOne({ }) -- Insert One-Document Once

db.<collection-name>.inseertMany([{}, {}, {}]) -- Insert Many-Document Once, use a LIST

--------------------------------------------------------------------------------------------------- FIND

*** FINDING ELEMENTS IN THE COLLECTION

NOTE : db.<collection-name>.find({<filter>}, {<To-show-this>})

supposes, i want to find password of a user

name : filter, password : projection (What i want to view)

db.user_id.find({name : {$eq : "hari"}}, {password : 1})

--------------------------------------------------------

# 2 ways you can find : find({}), $eq : "<value>", findOne({})

db.<collection-name>.find({}) --- Give's Me all the Result in the Collection

db.<collection-name>.find({name : "<value>"}) --- Give's Me all the Result in the Collection mathing that value

db.<collection-name>.find({"<key-value>" : {$eq : 10}}) --- usage of $eq (equal Operator)
        # db.<collection-name>.find({name : {$eq : "hari"}})

db.<collection-name>.findOne({<value>, <value>}) -- Gives One Result..

--------------------------------------------------------------------------------------------------- ARRAY

$in Operator bascially used while dealing witht the ARRAY

# db.<collection-name>.find({some-array-name : {$in : ['name','name]}})

How this works is: 
Assume there is few people values -- From this i need only developers and designer 

then i use db.<collection-name>.find({
    <list-name> : {$in : ['developer', 'designer']}
    tags : {$in : ['developer', 'designer']}
})

{
  "_id": 1,
  "name": "Alice",
  "tags": ["developer", "designer"]
}

{
  "_id": 2,
  "name": "Bob",
  "tags": ["manager", "developer"]
}

{
  "_id": 3,
  "name": "Charlie",
  "tags": ["student"]
}


--------------------------------------------------------------------------------------------------- COMPARISON OPERATOR

        # $gt : db.<collection-name>.find({'salary':{$gt : 5000}}) : >
        # $lt : db.<collection-name>.find({'salary':{$lt : 5000}}) : <
        # $lte : db.<collection-name>.find({'salary':{$lte : 5000}}) : <=
        # $gte : db.<collection-name>.find({'salary':{$gte : 5000}}) : >=
        # eq : db.<collection-name>.find({'salary : {'$eq : 50000}}) : ==


--------------------------------------------------------------------------------------------------- LOGICAL OPERATOR

        # $and : db.<collection-name>.find({"name":"a"},{"age":20})
        # $and : db.<collection-name>.find($and : [{"name":"hari"},{"age":20}])
        # $or : # $and : db.<collection-name>.find($or : [{"name" : "hari"}, {"name" : "hemanth"}])


--------------------------------------------------------------------------------------------------- REPLACING THE DOCUMENTS

# This is based on the ID ONLY

# But when your are replacing-The other elemnts in the docuemnt must also be mentioned.. or else the entire document is gone 

db.<collection-name>.replaceOne({_id},{name : 'soem-other-name'})

# TO CHECK IF IT'S REPLACED

        # db.<collection-name>.findOne({_id})



--------------------------------------------------------------------------------------------------- UPDATING THE DOCUMENTS

# an Update has three methods  : $set , $push , $upsert

# db.<collection-name>.updateOne({_id},{"some-key":"some-value"})

$ set: 
# $set -- they add element / replace

# db.<collection-name>.updateOne({_id},{$set : {"some-ele":"some-value"}})

# $push -- they work same as append ---- they uppend in list 

# db.<collection-name>.updateOne({_id},{$push : {"some-ele":"some-value"}})


        # $upsert -- they work as UPDATE AND INSERT
        
        # db.<collection-name>.updateOne({"title" : "some-contenet"}, {$set : {"pop-corn": true}},{upsert : true})


